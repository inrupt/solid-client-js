name: End-to-end Tests (Node)

on:
  push:
  # Allow manual triggering, e.g. to run end-to-end tests against Dependabot PRs:
  workflow_dispatch:

env:
  CI: true
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  e2e-node:
    runs-on: ${{ matrix.os }}
    environment:
      name: ${{ matrix.environment-name }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: ["20.x", "18.x", "16.x"]
        # NSS node-based end-to-end tests are only running for unauthenticated operations,
        # because NSS doesn't support static client registration. Therefore, they run
        # against an environment that has manually been pre-provisioned.
        environment-name: ["ESS PodSpaces", "NSS"]
        experimental: [false]
        include:
          - environment-name: "ESS Dev-2-2"
            experimental: true
            node-version: "20.x"
            os: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        # FIXME: setup-node's caching seems to not restore correctly: https://github.com/actions/setup-node/pull/323/files
        # if: steps.setup-node.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts

      - # Dependabot cannot access secrets, so it doesn't have a token to authenticate to ESS.
        # We want jobs in this workflow to be gating PRs, so the whole matrix must
        # run even for dependabot so that the matrixed jobs are skipped, instead
        # of the whole pipeline.
        if: ${{ github.actor != 'dependabot[bot]' }}
        run: npm run test:e2e:node
        env:
          E2E_TEST_POD: ${{ secrets.E2E_TEST_POD }}
          E2E_TEST_IDP: ${{ secrets.E2E_TEST_IDP }}
          E2E_TEST_ENVIRONMENT: ${{ matrix.environment-name }}
          E2E_TEST_OWNER_CLIENT_ID: ${{ secrets.E2E_TEST_OWNER_CLIENT_ID }}
          E2E_TEST_OWNER_CLIENT_SECRET: ${{ secrets.E2E_TEST_OWNER_CLIENT_SECRET }}
          E2E_TEST_FEATURE_ACP: ${{ secrets.E2E_TEST_FEATURE_ACP }}
          E2E_TEST_FEATURE_ACP_V3: ${{ secrets.E2E_TEST_FEATURE_ACP_V3 }}
          E2E_TEST_FEATURE_WAC: ${{ secrets.E2E_TEST_FEATURE_WAC }}
