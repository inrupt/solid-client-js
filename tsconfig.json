{
  "compilerOptions": {
    /* Basic Options */
    "target": "es2017" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */,
    "module": "commonjs" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */,
    "lib": [
      "es2015",
      "dom"
    ] /* Specify library files to be included in the compilation. */,
    // "allowJs": true,                       /* Allow javascript files to be compiled. */
    // "checkJs": true,                       /* Report errors in .js files. */
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    "declaration": true /* Generates corresponding '.d.ts' file. */,
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    // "sourceMap": true,                     /* Generates corresponding '.map' file. */
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    "outDir": "dist" /* Redirect output structure to the directory. */,
    "rootDir": "src" /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */,
    // "composite": true,                     /* Enable project compilation */
    // "removeComments": true,                /* Do not emit comments to output. */
    // "noEmit": true,                        /* Do not emit outputs. */
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    "strict": true /* Enable all strict type-checking options. */,
    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // "noUnusedLocals": true,                /* Report errors on unused locals. */
    // "noUnusedParameters": true,            /* Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // https://github.com/microsoft/TypeScript/wiki/Performance#controlling-types-inclusion:
    "types": [
      "jest"
    ] /* Type declaration files to be included in compilation. */,
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    // Prevent developers on different OSes from running into problems:
    "forceConsistentCasingInFileNames": true,

    /* Advanced Options */
    "stripInternal": true /* Do not emit declarations for code that has an @internal annotation in itâ€™s JSDoc comment. */

    /* Experimental Options */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
  },
  "typedocOptions": {
    "out": "docs/api/source/api",
    "hideInPageTOC": true,
    "entryPoints": [
      // The source files of everything listed under `exports` in our package.json
      // (i.e. public API's that should be documented) should be listed here:
      "src/interfaces.ts",
      "src/resource/resource.ts",
      "src/resource/solidDataset.ts",
      "src/resource/file.ts",
      "src/resource/mock.ts",
      "src/thing/thing.ts",
      "src/thing/get.ts",
      "src/thing/set.ts",
      "src/thing/add.ts",
      "src/thing/remove.ts",
      "src/thing/build.ts",
      "src/thing/mock.ts",
      "src/acl/acl.ts",
      "src/acl/agent.ts",
      "src/acl/group.ts",
      "src/acl/class.ts",
      "src/acl/mock.ts",
      "src/acp/acp.ts",
      "src/acp/control.ts",
      "src/acp/policy.ts",
      "src/acp/rule.ts",
      "src/acp/mock.ts",
      "src/universal/index.ts",
      "src/rdfjs.ts",
      "src/profile/jwks.ts",
      "src/profile/webid.ts",
      "src/formats/index.ts"
    ],
    "exclude": [
      "node_modules/**",
      ".codesandbox/**",
      "**/*.test.ts",
      // Internal helpers:
      "**/*.internal.ts",
      // End-to-end tests:
      "e2e/**",
      // Re-exported functions are already documented in their own modules:
      "src/index.ts",
      // Constants are only used internally:
      "src/constants.ts",
      // Helper methods for working with raw RDF internally:
      "src/datatypes.ts",
      // Behind-the-scenes auto-detection of the right fetcher to use:
      "src/fetcher.ts",
      // Helper methods for working with raw Turtle internally:
      "src/formats/turtle.ts",
      "src/formats/jsonLd.ts"
    ],
    "theme": "markdown",
    "readme": "none",
    "entryDocument": "index.md"
  },
  "include": ["src/**/*.ts", ".eslintrc.js"],
  "exclude": [
    "**/node_modules",
    // These end-to-end tests reference code in `.codesandbox`,
    // which is not part of this project and should not be compiled together with it.
    // Not excluding this will lead to the root of the repository being used
    // as the root directory for compilation (instead of /src),
    // meaning that files that would otherwise be included in /dist directly
    // (e.g. dist/index.d.ts) will then be built to /dist/src.
    "e2e"
  ]
}
